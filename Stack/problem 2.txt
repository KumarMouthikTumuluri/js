Step 1: If the scanned character is an operand, put it into postfix expression.
Step 2: If the scanned character is an operator and operator's stack is empty, push operator into operators' stack.
Step 3: If the operator's stack is not empty, there may be following possibilities.
>If the precedence of scanned operator is greater than the top most operator of operator's stack, push this operator into operator 's stack.
>If the precedence of scanned operator is less than the top most operator of operator's stack, pop the operators from operator's stack until we find a low precedence operator than the scanned character.
>If the precedence of scanned operator is equal then check the associativity of the operator. 
>If associativity left to right then pop the operators from stack until we find a low precedence operator. If associativity right to left then simply put into stack.

// If the scanned character is opening round bracket ( '(' ), push it into operator's stack.
// If the scanned character is closing round bracket ( ')' ), pop out operators from operator's stack until we find an opening bracket ('(' ).

 Repeat Step 1,2 and 3 till expression has character



Step 4: Now pop out all the remaining operators from the operator's stack and push into postfix expression.
Step 5: Exit





function checkOperator(op){
        switch (op)
        {
            case '+':
            case '-':
                return 1;

            case '*':
            case '/':
                return 2;

            case '^':
                return 3;

            case '(':
            case ')':
            case '{':
            case '}':
            case '[':
            case ']':
            
                return 4;
            
        }
    }

function infixToPostfix(exp) {
  let value = ''
  let s = new Stack()
  let postfix = new Stack()

  for (const key in exp) {
    if ( exp[key] === '{' || exp[key] === '}' || exp[key] === '[' || exp[key] === ']' || exp[key] === '(' || exp[key] === ')' || exp[key] === '^' || exp[key] === '+' || exp[key] === '-' || exp[key] === '*' || exp[key] === '/' ) {
      if (value !== '') {postfix.push(value);}
      if (s.length() === 0 && checkOperator(exp[key]) !== 4) {s.push(exp[key]);} 
	  else {
        if (checkOperator(exp[key]) !== 4) {
          innerLoop:
          while (s.length() > 0) {
            if (checkOperator(exp[key]) < checkOperator(s.peek())) {postfix.push(s.peek());s.pop();}
            else if (checkOperator(exp[key]) === checkOperator(s.peek())) {postfix.push(s.peek());s.pop();s.push(exp[key]);break innerLoop}
            else {
              if (checkOperator(exp[key]) !== 4) {s.push(exp[key])}
              break innerLoop
            }
          }
        }
      }
      value = ''
    } else {
      value += exp[key]
    }
  }

  while (s.length() > 0) {postfix.push(s.peek());s.pop();}
  return postfix;
}






function evalPostFix (exp) {
  var resultStack = new Stack();
  var postfix = exp.getStack();

  for (const key in postfix) {
    if(postfix[key]!=' '){
    if (!isNaN(postfix[key]) ) {
      resultStack.push(postfix[key]);
     console.log(resultStack.getStack());
    }
    else{ 
        if(postfix[key]!=' '){
        console.log(resultStack);
          console.log(postfix[key]);

           let a = resultStack.pop();
           let b = resultStack.pop();

        

              if (postfix[key] === '+'){
                let r=(parseFloat(b, 10) + parseFloat(a, 10)).toFixed(2);
                resultStack.push(r);console.log(resultStack.length());} 
             else if (postfix[key] === '-'){
                let r=(parseFloat(b, 10) - parseFloat(a, 10)).toFixed(2);
                resultStack.push(r);console.log(resultStack.length());}
             else if (postfix[key] === '*'){
                let r= (parseFloat(b,10) * parseFloat(a, 10)).toFixed(2);
                resultStack.push(r);console.log(resultStack.length());} 
            else if (postfix[key] === '/'){ 
                let r= (parseFloat(b,10) / parseFloat(a, 10)).toFixed(2);
                resultStack.push(r);console.log(resultStack.length());}
        }
     
      
     
    } 
  }
}
  return resultStack.getStack()[0];
}
let expression = "2.3 + (23 / 12) + (3.14159 * .24)";
   
let a=infixToPostfix(expression);
console.log(a);
let b=evalPostFix(a);
console.log(b);



#######################################################################################################################################################################
import {Stack} from './stack.module.js';


function isOperand(e)
{
  if(e.match( /^[a-zA-Z]+$/) || e.match( /^[+-]?([0-9]*[.])?[0-9]+$/) )
  return true;
}

function checkOperator(op){
        switch (op)
        {
            case '+':
            case '-':
                return 1;

            case '*':
            case '/':
                return 2;

            case '^':
                return 3;
       
        }
    }

function infixToPostfix(e) {
 
  let s = new Stack();
  let postfix = new Stack();
  
  let exp= e.split(' ');
  console.log(exp);
  for (const key in exp) {
   
    if (exp[key] == '(' || exp[key] == '[' || exp[key] == '{') {s.push(exp[key]);}
    
    else if (exp[key] == ')' || exp[key] == ']' || exp[key] == '}')
            {
                
                if(exp[key] == ')'){while (s.peek() != '(') {postfix.push(s.peek());s.pop();}s.pop();}
                if(exp[key] == ']'){while (s.peek() != '[') {postfix.push(s.peek());s.pop();}s.pop();}
                if(exp[key] == '}'){while (s.peek() != '{') {postfix.push(s.peek());s.pop();}s.pop();}
            }
    else if (isOperand(exp[key])) {postfix.push(exp[key]);}
    else {
				while (!s.isEmpty() && checkOperator(exp[key]) <= checkOperator(s.peek())) {
					postfix.push(s.peek());
          s.pop();
				}


				s.push(exp[key]);
			}
  }

  while (s.length() > 0) {
    postfix.push(s.peek());
    s.pop();
  }
  
  return postfix.getStack().filter(e=>e!=' ');
}

//let expression = "( A + B ) * ( C + D )";
  let expression = "2.3 + ( 23 / 12 ) + ( 3.14159 * .24 )"; //spaces need to be provided for readialbilty
  let a=infixToPostfix(expression);
  console.log(a);


// let expression = "2.3 + ( 23 / 12 ) + ( 3.14159 * .24 )";
// console.log(expression.split(' ').filter(e=>e.match(/^[+-]?([0-9]*[.])?[0-9]+$/)));

