class HashTable {
  constructor() {
    this.table  = new Array(137);
    this.values = [];
  }

  hash(string) {
    const H   = 37;
    let total = 0;

    for (var i = 0; i < string.length; i++) {
      total += H * total + string.charCodeAt(i);
    }
    total %= this.table.length;
    if (total < 1) {
      this.table.length -1
    }
    return parseInt(total);
  }

  showDistro() {
    for (const key in this.table) {
      if(this.table[key] !== undefined) {
        console.log(key, ' : ', this.table[key]);
      }
    }
  }

  put(data) {
    const pos = this.hash(data);
    this.table[pos] = data;
  }

  get(key) {
    return this.table[this.hash(key)];
  }
}

// HashTable with Build Chains technique class example for exercise 2
class HashTableChains extends HashTable {
  constructor() {
    super();
    this.buildChains();
  }
  buildChains() {
    for (var i = 0; i < this.table.length; i++) {
      this.table[i] = new Array();
    }
  }

  showDistro() {
    for (const key in this.table) {
      if(this.table[key][0] !== undefined) {
        console.log(key, ' : ', this.table[key]);
      }
    }
  }

  put(key, data) {
    let pos = this.hash(key);
     
    let index = 0;
    if(this.table[pos][index] === undefined) {

      //  this.table[pos][index]=key;
      //  this.table[pos][index+1]=data;
        this.table[pos][index] = {[key]:data};
    } else {
      ++index;
      while (this.table[pos][index] !== undefined ) {
        ++index;
      }
      //  this.table[pos][index]=key;
      //  this.table[pos][index+1]=data;
        this.table[pos][index] = {[key]:data};
    }
  }

  get(key) {
    const pos = this.hash(key);
   
    console.log("pos--->"+pos+"-key--->"+key);
    
    console.log(this.table[pos].length);

    for(let index=0;index<this.table[pos].length;index++){
      if(Object.keys(this.table[pos][index]).toString()==key){
        return this.table[pos][index][key];
        break;
      }
    }
        
    
  }
//  get(key) {
//  var index = 0;
//  var pos = this.hash(key);
//      for(let i=0;i<this.table[pos].length;i++){
//      if(this.table[pos][index]==key){
//        return this.table[pos][index+1];
//        break;
//      }
//      index+=2;
//     }  
//  }

// }
}


// Implementation
// #################################################
console.log('CHAPTER 8');

const readline   = require('readline');
const fs         = require('fs');

// const hash1 = new HashTableLinearP();
const hash2 = new HashTableChains();

const rl = readline.createInterface({
 input: fs.createReadStream('words.txt')
});

rl.on('line', (line) => {
  const split = line.split(':');
  hash2.put(split[0], split[1]);
});

rl.on('close', () => {
  
  /*
    2. Repeat exercise 1 using separate chaining.
  */
  console.log('\n\n### Exercise 2');
  hash2.showDistro();
  console.log("$$$$$$$$$$$$$$$"+hash2.get('David'));
 
});
