class List {
constructor(){
this.dataStore = [];
// positional methods
this.pos = 0;
this.firstPos = () => this.pos = 0; 
this.lastPos = () => this.pos = this.dataStore.length - 1; 
this.previousPos = () => this.pos < 0 ? this.pos = 0 : this.pos -= 1; 
this.nextPos = () => this.pos > this.dataStore.length ? this.pos = this.lastPos() : this.pos += 1; 
this.currentPos = () => this.pos > this.dataStore.length ? this.pos = this.lastPos() : this.pos; 
this.getPos = () => this.dataStore[this.pos];
this.movetoPos = (pos) => pos > this.dataStore.length || pos < 0 ? this.currentPos() : this.pos = pos;
this.loopFront = function(fn){for(this.firstPos();this.currentPos() < this.length();this.nextPos()){fn(this.getPos())}} 
this.loopBack = function(fn){for(this.lastPos();this.currentPos() >= 0;this.previousPos()){fn(this.getPos())}}

// mutator methods
 this.append = (...element) => {for(let i in element){this.dataStore[this.dataStore.length] = element[i]}}
 this.clear = () => this.dataStore = [];
 this.remove = (element) => this.dataStore.splice(this.find(element),1);
 this.insertAfter = (element,after) => this.dataStore.splice(this.find(after)+1,0,element);
 
// helper methods
this.length = () => this.dataStore.length;
this.find = (element) =>  this.dataStore.indexOf(element) > -1 ? this.dataStore.indexOf(element) : (function() {throw Error('yes');} )();
this.print = () => console.log(this.dataStore);
this.displayList = () => this.dataStore.forEach((item, counter) => {item instanceof Object ? console.log(`${counter + 1}.- ${Object.values(item)}`) : console.log(`${counter + 1}.- ${item}`);})

 }
}


module.exports = List;
#######################################################################################################################################################################

class List {
  constructor(dataStore = [], listSize = 0, pos = 0) {
    this.dataStore = dataStore;
    this.listSize  = listSize;
    this.pos       = pos;
  }

  clear() {
    this.dataStore = [];
    this.pos       = 0;
    this.listSize  = 0;
  }

  find(element) {
    return this.dataStore.findIndex(e => e === element);
  }

  insert(element, after) {
    const insertPos = this.find(after);
    if (insertPos != -1 ) {
      this.dataStore.splice(insertPos+1, 0, element);
      this.listSize++;
      return true;
    }
    return false;
  }

  append(element) {
    this.dataStore = [...this.dataStore, element];
    this.listSize++;
  }

  remove(element) {
    const removePos = this.find(element);
    if(removePos != -1) {
      this.dataStore.splice(removePos, 1);
      this.listSize--;
      return true;
    }
    return false;
  }

  front() {
    this.pos = 0;
  }

  end() {
    this.pos = this.listSize - 1;
  }

  prev() {
    if (this.pos > 0) {
      --this.pos;
    }
  }

  next() {
    if (this.pos < this.listSize - 1) {
      ++this.pos;
    }
  }

  length() {
    return this.listSize;
  }

  currPos() {
    return this.pos;
  }

  moveTo(position) {
    this.pos = position
  }

  getElement() {
    return this.dataStore[this.pos];
  }

  contains(element) {
    return (this.dataStore.find(value => value === element) != undefined ) ? true : false;
  }

  displayList() {
    this.dataStore.forEach((item, counter) => {
      console.log(`${counter + 1}.- ${item}`);
    })
  }

  toString() {
    return JSON.stringify(this.dataStore);
  }
}
